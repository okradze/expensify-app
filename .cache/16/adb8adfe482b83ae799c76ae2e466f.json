{"id":"../node_modules/airbnb-prop-types/build/nonNegativeNumber.js","dependencies":[{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\build\\nonNegativeNumber.js.map","includedInParent":true,"mtime":1552029750668},{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\package.json","includedInParent":true,"mtime":1552391975889},{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\.babelrc","includedInParent":true,"mtime":1552388372836},{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\package.json","includedInParent":true,"mtime":1552029750668},{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\.babelrc","includedInParent":true,"mtime":1552029750668},{"name":"object-is","loc":{"line":8,"column":47},"parent":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\build\\nonNegativeNumber.js","resolved":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\object-is\\index.js"},{"name":"./helpers/wrapValidator","loc":{"line":10,"column":52},"parent":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\build\\nonNegativeNumber.js","resolved":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\build\\helpers\\wrapValidator.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectIs = _interopRequireDefault(require(\"object-is\"));\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction isNonNegative(x) {\n  return typeof x === 'number' && isFinite(x) && x >= 0 && !(0, _objectIs[\"default\"])(x, -0);\n}\n\nfunction nonNegativeNumber(props, propName, componentName) {\n  var value = props[propName];\n\n  if (value == null || isNonNegative(value)) {\n    return null;\n  }\n\n  return new RangeError(\"\".concat(propName, \" in \").concat(componentName, \" must be a non-negative number\"));\n}\n\nfunction requiredNonNegativeNumber(props, propName, componentName) {\n  var value = props[propName];\n\n  if (isNonNegative(value)) {\n    return null;\n  }\n\n  return new RangeError(\"\".concat(propName, \" in \").concat(componentName, \" must be a non-negative number\"));\n}\n\nnonNegativeNumber.isRequired = requiredNonNegativeNumber;\n\nvar _default = function _default() {\n  return (0, _wrapValidator[\"default\"])(nonNegativeNumber, 'nonNegativeNumber');\n};\n\nexports[\"default\"] = _default;\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/nonNegativeNumber.js"],"names":["isNonNegative","x","isFinite","nonNegativeNumber","props","propName","componentName","value","RangeError","requiredNonNegativeNumber","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,SAASA,aAAT,CAAuBC,CAAvB,EAA0B;AACxB,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBC,QAAQ,CAACD,CAAD,CAAjC,IAAwCA,CAAC,IAAI,CAA7C,IAAkD,CAAC,0BAAGA,CAAH,EAAM,CAAC,CAAP,CAA1D;AACD;;AAED,SAASE,iBAAT,CAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,aAA5C,EAA2D;AACzD,MAAMC,KAAK,GAAGH,KAAK,CAACC,QAAD,CAAnB;;AAEA,MAAIE,KAAK,IAAI,IAAT,IAAiBP,aAAa,CAACO,KAAD,CAAlC,EAA2C;AACzC,WAAO,IAAP;AACD;;AAED,SAAO,IAAIC,UAAJ,WAAkBH,QAAlB,iBAAiCC,aAAjC,oCAAP;AACD;;AAED,SAASG,yBAAT,CAAmCL,KAAnC,EAA0CC,QAA1C,EAAoDC,aAApD,EAAmE;AACjE,MAAMC,KAAK,GAAGH,KAAK,CAACC,QAAD,CAAnB;;AAEA,MAAIL,aAAa,CAACO,KAAD,CAAjB,EAA0B;AACxB,WAAO,IAAP;AACD;;AAED,SAAO,IAAIC,UAAJ,WAAkBH,QAAlB,iBAAiCC,aAAjC,oCAAP;AACD;;AAEDH,iBAAiB,CAACO,UAAlB,GAA+BD,yBAA/B;;eAEe;AAAA,SAAM,+BAAcN,iBAAd,EAAiC,mBAAjC,CAAN;AAAA,C","sourcesContent":["import is from 'object-is';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction isNonNegative(x) {\n  return typeof x === 'number' && isFinite(x) && x >= 0 && !is(x, -0);\n}\n\nfunction nonNegativeNumber(props, propName, componentName) {\n  const value = props[propName];\n\n  if (value == null || isNonNegative(value)) {\n    return null;\n  }\n\n  return new RangeError(`${propName} in ${componentName} must be a non-negative number`);\n}\n\nfunction requiredNonNegativeNumber(props, propName, componentName) {\n  const value = props[propName];\n\n  if (isNonNegative(value)) {\n    return null;\n  }\n\n  return new RangeError(`${propName} in ${componentName} must be a non-negative number`);\n}\n\nnonNegativeNumber.isRequired = requiredNonNegativeNumber;\n\nexport default () => wrapValidator(nonNegativeNumber, 'nonNegativeNumber');\n"],"file":"nonNegativeNumber.js"}},"error":null,"hash":"f7cde3058ac38bc9d2661f2e62d7e4d8","cacheData":{"env":{}}}