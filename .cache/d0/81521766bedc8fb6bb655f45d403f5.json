{"id":"../node_modules/airbnb-prop-types/build/stringStartsWith.js","dependencies":[{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\build\\stringStartsWith.js.map","includedInParent":true,"mtime":1552029750668},{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\package.json","includedInParent":true,"mtime":1552376831688},{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\.babelrc","includedInParent":true,"mtime":1551890671600},{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\package.json","includedInParent":true,"mtime":1552029750668},{"name":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\.babelrc","includedInParent":true,"mtime":1552029750668},{"name":"prop-types","loc":{"line":8,"column":25},"parent":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\build\\stringStartsWith.js","resolved":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\prop-types\\index.js"},{"name":"./helpers/wrapValidator","loc":{"line":10,"column":52},"parent":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\build\\stringStartsWith.js","resolved":"C:\\Users\\Psycho\\Desktop\\react\\expensify-app\\node_modules\\airbnb-prop-types\\build\\helpers\\wrapValidator.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = stringStartsWithValidator;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction stringStartsWithValidator(start) {\n  if (typeof start !== 'string' || start.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  var validator = function stringStartsWith(props, propName, componentName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    }\n\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));\n\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.startsWith(start) || propValue.length <= start.length) {\n      return new TypeError(\"\".concat(componentName, \": \").concat(propName, \" does not start with \\\"\").concat(start, \"\\\"\"));\n    }\n\n    return null;\n  };\n\n  validator.isRequired = function requiredStringStartsWith() {\n    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);\n\n    if (stringError) {\n      return stringError;\n    }\n\n    return validator.apply(void 0, arguments);\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, \"stringStartsWith: \".concat(start));\n}\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/stringStartsWith.js"],"names":["stringStartsWithValidator","start","length","TypeError","validator","stringStartsWith","props","propName","componentName","propValue","rest","stringError","string","startsWith","isRequired","requiredStringStartsWith"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,SAASA,yBAAT,CAAmCC,KAAnC,EAA0C;AACvD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,MAAN,KAAiB,CAAlD,EAAqD;AACnD,UAAM,IAAIC,SAAJ,CAAc,gCAAd,CAAN;AACD;;AAED,MAAMC,SAAS,GAAG,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CC,aAA3C,EAAmE;AAAA,QAC/DC,SAD+D,GACjDH,KADiD,CAC1EC,QAD0E;;AAGnF,QAAIE,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD;;AALkF,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAOnF,QAAMC,WAAW,GAAGC,iCAAON,KAAP,EAAcC,QAAd,EAAwBC,aAAxB,SAA0CE,IAA1C,EAApB;;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;;AAED,QAAI,CAACF,SAAS,CAACI,UAAV,CAAqBZ,KAArB,CAAD,IAAgCQ,SAAS,CAACP,MAAV,IAAoBD,KAAK,CAACC,MAA9D,EAAsE;AACpE,aAAO,IAAIC,SAAJ,WAAiBK,aAAjB,eAAmCD,QAAnC,oCAAoEN,KAApE,QAAP;AACD;;AACD,WAAO,IAAP;AACD,GAhBD;;AAkBAG,EAAAA,SAAS,CAACU,UAAV,GAAuB,SAASC,wBAAT,GAA2C;AAChE,QAAMJ,WAAW,GAAGC,kBAAOE,UAAP,oCAApB;;AACA,QAAIH,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;;AACD,WAAOP,SAAS,MAAT,mBAAP;AACD,GAND;;AAQA,SAAO,+BAAcA,SAAd,8BAA8CH,KAA9C,EAAP;AACD","sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function stringStartsWithValidator(start) {\n  if (typeof start !== 'string' || start.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  const validator = function stringStartsWith(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n\n    if (propValue == null) {\n      return null;\n    }\n\n    const stringError = string(props, propName, componentName, ...rest);\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.startsWith(start) || propValue.length <= start.length) {\n      return new TypeError(`${componentName}: ${propName} does not start with \"${start}\"`);\n    }\n    return null;\n  };\n\n  validator.isRequired = function requiredStringStartsWith(...args) {\n    const stringError = string.isRequired(...args);\n    if (stringError) {\n      return stringError;\n    }\n    return validator(...args);\n  };\n\n  return wrapValidator(validator, `stringStartsWith: ${start}`);\n}\n"],"file":"stringStartsWith.js"}},"error":null,"hash":"6f17cbc3bd4ecd98583cda4b1185da68","cacheData":{"env":{}}}